# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\paint.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import traceback

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QMainWindow, QApplication, QMenu, QMenuBar, QAction, QFileDialog, QGraphicsView, \
    QGraphicsScene, QLabel, QMessageBox
from PyQt5.QtGui import QIcon, QImage, QPainter, QPen, QBrush, QPixmap, QColor
from PyQt5.QtCore import Qt, QPoint
from PyQt5 import QtGui
import sys
import os
import paint_unredo


class Canvas(QLabel):
    undo_redo = None
    qpixmap = None

    def __init__(self, height, width, background_color=QColor(255, 255, 255, 255)):
        super().__init__()
        self.qpixmap = QPixmap(int(height), int(width))
        self.qpixmap.fill(background_color)
        self.setPixmap(self.qpixmap)
        self.pen_color = QColor('#000000')
        self.pen_width = 4
        self.pen_style = "pen"
        self.undo_redo = paint_unredo.unredo()
        self.undo_redo.push(self.pixmap().copy())
        # self.image() #idk-about-this-either
        self.image = QImage(self.size(), QImage.Format_RGB32)
        self.image.fill(Qt.white)
        self.fill_now = False
        self.fill_color = "#00000"

    def set_pen_color(self, color):
        self.pen_color = QtGui.QColor(color)

    def set_pen_width(self, width):
        self.pen_width = width

    def set_pen_style(self, style):
        self.pen_style = style

    def set_fill(self):
        self.fill_now = True

    def flood_fill(self, x, y, fill_color):
        image = self.pixmap().toImage()
        w, h = image.width(), image.height()

        # Get our target color from origin.
        target_color = image.pixel(x, y)

        have_seen = set()
        queue = [(x, y)]

        def get_cardinal_points(have_seen, center_pos):
            points = []
            cx, cy = center_pos
            for x, y in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
                xx, yy = cx + x, cy + y
                if (xx >= 0 and xx < w and
                        yy >= 0 and yy < h and
                        (xx, yy) not in have_seen):
                    points.append((xx, yy))
                    have_seen.add((xx, yy))
            return points

        # Now perform the search and fill.
        p = QPainter(self.pixmap())
        p.setPen(QPen(fill_color))

        while queue:
            x, y = queue.pop()
            if image.pixel(x, y) == target_color:
                p.drawPoint(QPoint(x, y))
                queue.extend(get_cardinal_points(have_seen, (x, y)))
        self.update()

    def draw_point(self, x, y):
        if self.fill_now:
            self.flood_fill(x, y, QColor(self.fill_color))
            return
        painter = QPainter(self.pixmap())
        p = painter.pen()
        if self.pen_style == "marker":
            p.setCapStyle(Qt.RoundCap)
            p.setJoinStyle(Qt.RoundJoin)
            p.setWidth(self.pen_width)
            p.setColor(QColor(0, 0, 0, 150))
        elif self.pen_style == "pencil":
            p.setCapStyle(Qt.FlatCap)
            p.setJoinStyle(Qt.MiterJoin)
            p.setMiterLimit(3)
            p.setWidth(self.pen_width)
            p.setColor(self.pen_color)
        else:
            p.setCapStyle(Qt.RoundCap)
            p.setJoinStyle(Qt.BevelJoin)
            p.setWidth(self.pen_width)
            p.setColor(QColor(self.pen_color))
        painter.setPen(p)
        painter.drawPoint(x, y)
        painter.end()
        self.update()

    def draw_line(self, x0, y0, x1, y1):
        if self.fill_now: return
        painter = QPainter(self.pixmap())
        p = painter.pen()
        if self.pen_style == "marker":
            p.setCapStyle(Qt.RoundCap)
            p.setJoinStyle(Qt.RoundJoin)
            p.setWidth(self.pen_width)
            p.setColor(QColor(0, 0, 0, 150))
        elif self.pen_style == "pencil":
            p.setCapStyle(Qt.FlatCap)
            p.setJoinStyle(Qt.MiterJoin)
            p.setMiterLimit(3)
            p.setWidth(self.pen_width)
            p.setColor(QColor(self.pen_color))
        else:
            p.setCapStyle(Qt.RoundCap)
            p.setJoinStyle(Qt.BevelJoin)
            p.setWidth(self.pen_width)
            p.setColor(QColor(self.pen_color))
        painter.setPen(p)
        painter.drawLine(x0, y0, x1, y1)
        painter.end()
        self.update()

    def mousePressEvent(self, e: QtGui.QMouseEvent):
        self.draw_point(e.x(), e.y())
        self.prev_point = (e.x(), e.y())

    def mouseMoveEvent(self, e):
        self.draw_line(self.prev_point[0], self.prev_point[1], e.x(), e.y())
        self.prev_point = (e.x(), e.y())

    def mouseReleaseEvent(self, e):
        self.prev_point = tuple()
        self.undo_redo.push(self.pixmap().copy())

    def undo(self):
        y = self.undo_redo.undo()
        if y != False:
            self.setPixmap(y)
            self.update()

    def redo(self):
        x = self.undo_redo.redo()
        if x != False:
            self.setPixmap(x)
            self.update()

    def clear(self):
        self.qpixmap.fill(Qt.white)
        self.setPixmap(self.qpixmap)
        self.update()
        self.undo_redo.Catch_clear()
        self.undo_redo.push(self.pixmap().copy())

    def save(self):
        filePath, format = QFileDialog.getSaveFileName(self, "Save Image", "",
                                                       "PNG(*.png);;JPEG(*.jpg *.jpeg);;All Files(*.*) ")
        if filePath == "":
            return
        # self.image.save(filePath)
        self.pixmap().save(filePath)


class Ui_Form(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def set_color1(self):
        self.canvas.set_fill()
        button = self.pushButton
        fill_color = list(filter(lambda style: "background-color" in style, button.styleSheet().split("\n")))[
            0].lower().split("background-color:")[-1].replace(";", "").strip()
        print(fill_color)
        self.canvas.fill_color = fill_color

    def set_color2(self):
        self.canvas.set_fill()
        button = self.pushButton_2
        fill_color = list(filter(lambda style: "background-color" in style, button.styleSheet().split("\n")))[
            0].lower().split("background-color:")[-1].replace(";", "").strip()
        print(fill_color)
        self.canvas.fill_color = fill_color

    def set_color3(self):
        self.canvas.set_fill()
        button = self.pushButton_3
        fill_color = list(filter(lambda style: "background-color" in style, button.styleSheet().split("\n")))[
            0].lower().split("background-color:")[-1].replace(";", "").strip()
        print(fill_color)
        self.canvas.fill_color = fill_color

    def set_color4(self):
        self.canvas.set_fill()
        button = self.pushButton_4
        fill_color = list(filter(lambda style: "background-color" in style, button.styleSheet().split("\n")))[
            0].lower().split("background-color:")[-1].replace(";", "").strip()
        print(fill_color)
        self.canvas.fill_color = fill_color

    def set_color5(self):
        self.canvas.set_fill()
        button = self.pushButton_5
        fill_color = list(filter(lambda style: "background-color" in style, button.styleSheet().split("\n")))[
            0].lower().split("background-color:")[-1].replace(";", "").strip()
        print(fill_color)
        self.canvas.fill_color = fill_color

    def set_color6(self):
        self.canvas.set_fill()
        button = self.pushButton_6
        fill_color = list(filter(lambda style: "background-color" in style, button.styleSheet().split("\n")))[
            0].lower().split("background-color:")[-1].replace(";", "").strip()
        print(fill_color)
        self.canvas.fill_color = fill_color

    def off_filling(self):
        self.canvas.fill_now = False

    def setupUi(self):
        self.setObjectName("Form")
        self.resize(1358, 756)
        self.setMinimumSize(1358, 756)
        self.setMaximumSize(1358, 756)
        self.setWindowIcon(QIcon("./logo.png"))
        self.widget = QtWidgets.QWidget(self)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1361, 761))
        self.widget.setStyleSheet("background-color: #22222e\n"
                                  "")
        self.widget.setObjectName("widget")

        self.frame = QtWidgets.QFrame(self.widget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 960, 820))
        self.frame.setStyleSheet("background-color: gray;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.canvas = Canvas(self.frame.size().width(), self.frame.size().height())
        l = QtWidgets.QVBoxLayout(self.frame)
        l.setContentsMargins(0, 0, 0, 0)
        l.addWidget(self.canvas)

        self.frame_3 = QtWidgets.QFrame(self.widget)
        self.frame_3.setGeometry(QtCore.QRect(960, 0, 401, 821))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.frame_2 = QtWidgets.QFrame(self.frame_3)
        self.frame_2.setGeometry(QtCore.QRect(0, 0, 401, 81))
        self.frame_2.setStyleSheet("background-color: #fb5b5d;")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label = QtWidgets.QLabel(self.frame_2)
        self.label.setGeometry(QtCore.QRect(0, 0, 401, 81))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: white\n"
                                 "")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        self.label_2.setGeometry(QtCore.QRect(140, 60, 401, 81))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: white\n"
                                   "")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.colors = QtWidgets.QFrame(self.frame_3)
        self.colors.setGeometry(QtCore.QRect(10, 180, 381, 41))
        self.colors.setStyleSheet("")
        self.colors.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.colors.setFrameShadow(QtWidgets.QFrame.Raised)
        self.colors.setObjectName("colors")
        self.pushButton = QtWidgets.QPushButton(self.colors)
        self.pushButton.setGeometry(QtCore.QRect(20, 0, 51, 41))
        self.pushButton.setStyleSheet("background-color: red;\n"
                                      "border: 0px;")
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.colors)
        self.pushButton_2.setGeometry(QtCore.QRect(80, 0, 51, 41))
        self.pushButton_2.setStyleSheet("background-color: red;\n"
                                        "border: 0px;")
        self.pushButton_2.setText("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.colors)
        self.pushButton_3.setGeometry(QtCore.QRect(140, 0, 51, 41))
        self.pushButton_3.setStyleSheet("background-color: red;\n"
                                        "border: 0px;")
        self.pushButton_3.setText("")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.colors)
        self.pushButton_4.setGeometry(QtCore.QRect(200, 0, 51, 41))
        self.pushButton_4.setStyleSheet("background-color: red;\n"
                                        "border: 0px;")
        self.pushButton_4.setText("")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.colors)
        self.pushButton_5.setGeometry(QtCore.QRect(260, 0, 51, 41))
        self.pushButton_5.setStyleSheet("background-color: red;\n"
                                        "border: 0px;")
        self.pushButton_5.setText("")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.colors)
        self.pushButton_6.setGeometry(QtCore.QRect(320, 0, 51, 41))
        self.pushButton_6.setStyleSheet("background-color: red;\n"
                                        "border: 0px;")
        self.pushButton_6.setText("")
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_3 = QtWidgets.QLabel(self.frame_3)
        self.label_3.setGeometry(QtCore.QRect(0, 120, 401, 41))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: white\n"
                                   "")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit.setGeometry(QtCore.QRect(320, 250, 61, 61))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(9)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("color:white;\n"
                                    "border: 2px solid #fb5b5d;\n"
                                    "border-radius: 30;")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.label_4 = QtWidgets.QLabel(self.frame_3)
        self.label_4.setGeometry(QtCore.QRect(50, 250, 151, 61))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: white\n"
                                   "")
        self.label_4.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.frame_3)
        self.label_5.setGeometry(QtCore.QRect(50, 340, 151, 61))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: white\n"
                                   "")
        self.label_5.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_7.setGeometry(QtCore.QRect(20, 510, 361, 61))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(11)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("QPushButton {\n"
                                        "    color: white;\n"
                                        "    background-color: #fb5b5d;\n"
                                        "    border-radius: 30\n"
                                        "}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_8.setGeometry(QtCore.QRect(220, 340, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(11)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet("QPushButton {\n"
                                        "    color:white;\n"
                                        "border: 2px solid #fb5b5d;\n"
                                        "border-radius: 30;\n"
                                        "}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.off_filling)
        self.pushButton_9 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_9.setGeometry(QtCore.QRect(20, 670, 361, 61))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")
        font.setPointSize(11)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("QPushButton {\n"
                                        "    color: white;\n"
                                        "    background-color: #fb5b5d;\n"
                                        "    border-radius: 30\n"
                                        "}")
        self.pushButton_9.setObjectName("pushButton_9")
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setup_paint()
        self.pushButton_9.clicked.connect(self.save_image)
        self.pushButton_7.clicked.connect(self.load_image)


    def load_image(self):
        imagePath, _ = QFileDialog.getOpenFileName()
        if str(imagePath).strip() == "": return
        pixmap = QPixmap(imagePath)
        self.canvas.qpixmap = pixmap
        self.canvas.setPixmap(pixmap)
        self.canvas.resize(self.frame.size())
        self.canvas.adjustSize()

    def save_image(self):
        self.canvas.save()

    def print_image(self):
        path = os.path.abspath(os.curdir) + '/tmp.png'
        self.canvas.pixmap().save(path)
        os.startfile(path, "print")

    def change_pen_width(self):
        width = self.lineEdit.text()
        if width == "": return
        try:
            width = int(width)
            if width < 2: return
            if width > 43: 1/0
            self.canvas.pen_width = int(self.lineEdit.text())
        except:
            self.lineEdit.setText("4")

    def setup_paint(self):
        self.lineEdit.textChanged.connect(self.change_pen_width)
        self.canvas.pen_width = int(self.lineEdit.text())

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Исполнитель желаний"))
        self.label.setText(_translate("Form", "Пупкин Василий Васильевич"))
        self.label_2.setText(_translate("Form", "Пупкин Василий Васильевич"))
        self.label_3.setText(_translate("Form", "Выбор цвета для раскрашивания"))
        self.lineEdit.setText(_translate("Form", "17"))
        self.label_4.setText(_translate("Form", "Размер кисти:"))
        self.label_5.setText(_translate("Form", "Кисть:"))
        self.pushButton_7.setText(_translate("Form", "Загрузить"))
        self.pushButton_8.setText(_translate("Form", "Фломастер"))
        self.pushButton_9.setText(_translate("Form", "Готово"))


if __name__ == '__main__':
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_Form()
    ui.show()
    sys.exit(app.exec_())
